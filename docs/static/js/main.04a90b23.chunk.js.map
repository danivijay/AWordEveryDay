{"version":3,"sources":["components/Hero.jsx","components/WordCard.jsx","components/WordList.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Hero","react_default","a","createElement","react","bloomer_min","isCentered","style","marginTop","isFullWidth","isSize","mobile","desktop","hasTextAlign","color","href","target","rel","WordCard","_ref","_ref$wordInfo","wordInfo","ref","_ref$wordInfo$def","def","word","meanings","incident","example","_ref$wordInfo$def$has","hasSpoilers","day","_ref$showSpoilerByDef","showSpoilerByDefault","_useState","useState","_useState2","Object","slicedToArray","showSpoiler","setshowSpoiler","isColor","link","name","map","meaning","key","isMarginless","isPaddingless","isOverlay","onClick","disabled","className","WordList","wordList","reverse","i","components_WordCard","length","FooterIcon","_ref$iconInfo","iconInfo","icon","Footer","Footer_FooterIcon","window","scrollTo","cursor","ReactGA","initialize","pageview","location","pathname","search","console","log","App","components_Hero","components_WordList","wordListJson","data","components_Footer","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04a90b23.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Columns, Column, Title, Subtitle, Field, Control, Checkbox } from 'bloomer';\n\nconst Hero = () => {\n      return (\n            <Fragment>\n                  <Columns isCentered style={{ marginTop: '20px' }} isFullWidth>\n                        <Column isSize={{ mobile: 12, desktop: '1/2' }} hasTextAlign=\"centered\">\n                              <Title isSize={1}>\n                                    #A<span style={{ color: '#0967fd' }}>Word</span>\n                                    <wbr />\n                                    EveryDay\n                              </Title>\n                              <Subtitle style={{ marginTop: '40px' }} isSize={4}>\n                                    I'm learning a word everyday(well.. almost), with the help of pop culture. Each word will have a real life\n                                    reference - which can be a movie, series, or anything which I encounters in my day to day life.\n                              </Subtitle>\n                              <Title isSize={6}>\n                                    -{' '}\n                                    <a href=\"https://twitter.com/UtmostDev\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                          Dani Vijay\n                                    </a>\n                              </Title>\n                        </Column>\n                  </Columns>\n            </Fragment>\n      );\n};\n\nexport default Hero;\n","import React, { Fragment, useState } from 'react';\nimport { Columns, Column, Card, CardHeader, CardHeaderTitle, CardContent, Tag, Title, Subtitle, Content, Button, Icon } from 'bloomer';\n\nconst WordCard = ({\n      wordInfo: {\n            ref,\n            def: { word, meanings, incident, example, hasSpoilers = false },\n      },\n      day,\n      showSpoilerByDefault = false,\n}) => {\n      const [showSpoiler, setshowSpoiler] = useState(showSpoilerByDefault);\n      return (\n            <Columns isCentered style={{ marginTop: '20px' }}>\n                  <Column isSize={{ mobile: 12, desktop: '1/2' }}>\n                        <Card>\n                              <CardHeader>\n                                    <CardHeaderTitle>\n                                          Day {day} &nbsp;&nbsp;\n                                          <Tag isColor=\"light\">\n                                                <a href={ref.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                      {ref.name}\n                                                </a>\n                                          </Tag>\n                                    </CardHeaderTitle>\n                              </CardHeader>\n                              <CardContent>\n                                    <Title isSize={6}>{incident}</Title>\n                                    <Title isSize={2}>{word}</Title>\n                                    <Subtitle isSize={3}>\n                                          {meanings &&\n                                                meanings.map((meaning) => (\n                                                      <Fragment key={meaning}>\n                                                            - {meaning}\n                                                            <br />\n                                                      </Fragment>\n                                                ))}\n                                    </Subtitle>\n                                    {hasSpoilers && (\n                                          <Content hasTextAlign=\"centered\" isMarginless isPaddingless>\n                                                <Button\n                                                      isColor=\"danger\"\n                                                      isSize=\"small\"\n                                                      isOverlay\n                                                      onClick={() => setshowSpoiler(true)}\n                                                      disabled={showSpoiler}\n                                                >\n                                                      <Icon isSize=\"small\" className=\"fa fa-exclamation-triangle\" />\n                                                      &nbsp;&nbsp;Show Example (may contain spoilers!)\n                                                </Button>\n                                          </Content>\n                                    )}\n                                    <Content isSize={'medium'} className={hasSpoilers && !showSpoiler && 'blur'}>\n                                          <i>{example}</i>\n                                    </Content>\n                              </CardContent>\n                        </Card>\n                  </Column>\n            </Columns>\n      );\n};\n\nexport default WordCard;\n","import React, { Fragment, useState } from 'react';\nimport WordCard from './WordCard';\n\nconst WordList = ({ wordList }) => {\n      return (\n            <Fragment>\n                  {wordList &&\n                        wordList.reverse().map((wordInfo, i) => <WordCard wordInfo={wordInfo} key={wordInfo.def.word} day={wordList.length - i} />)}\n            </Fragment>\n      );\n};\n\nexport default WordList;\n","import React, { Fragment } from 'react';\nimport { Columns, Column, Icon } from 'bloomer';\n\nconst FooterIcon = ({ iconInfo: { link, icon } }) => (\n      <a href={link} target=\"_blank\">\n            <Icon isSize=\"small\" className={icon} />\n      </a>\n);\n\nconst Footer = () => {\n      const footerIcons = [\n            {\n                  link: 'https://twitter.com/UtmostDev',\n                  icon: 'fab fa-twitter',\n            },\n            {\n                  link: 'https://github.com/danivijay/AWordEveryDay',\n                  icon: 'fab fa-github',\n            },\n      ];\n      return (\n            <Columns isCentered style={{ marginTop: '20px' }}>\n                  <Column isSize={{ mobile: 12, desktop: '1/2' }} hasTextAlign=\"centered\">\n                        {footerIcons.map((iconInfo) => (\n                              <Fragment key={iconInfo.link}>\n                                    <FooterIcon iconInfo={iconInfo} />\n                                    &nbsp;&nbsp;\n                              </Fragment>\n                        ))}\n                        <Icon className=\"fas fa-arrow-up\" onClick={() => window.scrollTo(0, 0)} style={{ cursor: 'pointer' }} />\n                  </Column>\n            </Columns>\n      );\n};\n\nexport default Footer;\n","import React, { Fragment } from 'react';\nimport Hero from './components/Hero';\nimport wordListJson from './wordList.json';\nimport WordList from './components/WordList';\nimport Footer from './components/Footer';\nimport './app.css';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-93459619-4');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nconsole.log(window.location.pathname + window.location.search);\n\nfunction App() {\n      return (\n            <Fragment>\n                  <Hero />\n                  <WordList wordList={wordListJson.data} />\n                  <Footer />\n            </Fragment>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}